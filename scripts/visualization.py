import cufflinks            as cfimport plotly.offline       as pyimport plotly.graph_objects as goimport plotly_express       as px         import pandas  as pdimport numpy   as npfrom   pathlib import Pathpy.init_notebook_mode(connected=False)def pct_stacked_bar(df, x, color, x_label, c_order=None, y_label="Percentage",                 width=None, height=None, path=f'pct_stacked_bar.html'):        # The dataframe for creating stacked bar graphs    df2 = df.groupby([x, color]).size().reset_index(name='count')        df2['pct'] = None # Add a new column to the df to avoid key error below        # Compute and store percentages column to display in stacked bar graph    for i in df2[x].unique():        df2['pct'].loc[df2[x]==i] = \        df2['count']/df2.loc[df2[x]==i].sum()['count']        # Clean up formatting of pct column       df2['pct'] = df2['pct'].astype(float)    df2['pct'] = df2['pct']*100    df2['pct_rounded'] = round(df2['pct'],1)    df2['pct_rounded'] = df2[['pct_rounded']].astype(str)    df2['pct_rounded'] = df2['pct_rounded']+'%'        # Test to check that pct column adds to 100 for each lvl of support    for i in df2[x].unique():         np.allclose(df2['pct'].loc[df2[x]==i].sum(), 100)            labels = {x: x_label, 'count': 'Count'}        fig = px.bar(data_frame=df2, x=x, y='pct', color=color,                  text='pct_rounded', category_orders=c_order,                  color_discrete_sequence=px.colors.sequential.Aggrnyl,                  opacity=0.65, barmode='relative',                  title=f'Level of support for social services broken down by {color} ',                  width=width, height=height)        # Remove grid lines     fig.update_xaxes(showgrid=False)    fig.update_yaxes(showgrid=False)        # Update traces     fig.update_traces(textposition='inside', insidetextanchor='middle', hoverinfo='skip')        # Update layout    xaxis=dict(title=x_label)    yaxis=dict(title=y_label)    layout = {'plot_bgcolor':"#FFFFFF", 'xaxis': xaxis, 'yaxis': yaxis,              'hovermode': False}        fig.update_layout(layout)    fig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')    fig.update_layout(legend=dict(itemclick='toggleothers', itemdoubleclick='toggle'))        fig.show(config={"displayModeBar": False, "showTips": False}) # Remove floating menu and unnecesary dialog box        # To do: make it so the figure is saved without the menu and dialogue box    fig.write_html(path)        return figif __name__=='__main__':        dfs = []        # read in data frames and append to dfs    path = Path('../data/processed_data/social_services_data_processed.csv')    df = pd.read_csv(path)    dfs.append(df)    dfs = dfs*5        # dataframe column to use for breakdown (color)    colors = ['Retirement_Status','Employment_Status',              'Trust_In_Gov', 'Ideology']        # dataframe column to use for x data    xs = ['Support_Services']*len(colors)          # label for x axis of figure    x_labels = ["Level of support for services"]*len(colors)        # desired order for color category    rs_order  = ['Not Retired', 'Retired']       es_order  = ['Employed', 'Unemployed']        tig_order = ['Never', 'Some of the time', 'About half the time',                  'Most of the time', 'Always', 'No Response']        i_order   = ['Extremely Conservative', 'Conservative',                  'Slightly Conservative', 'Moderate',                  'Slightly Liberal', 'Liberal',                  'Extremely Liberal']        c_orders  = {'Retirement_Status': rs_order,'Employment_Status': es_order,                 'Trust_In_Gov': tig_order, 'Ideology': i_order}        # path to save figure    save_paths = []    for color in colors:        save_paths.append(f'../figures/social_services_support/social_services_{color}_stacked_bar.html')         for df, x, color, x_label, c_order, path in zip(dfs, xs, colors, x_labels,                                                     c_orders, save_paths):                pct_stacked_bar(df=df, x=x, color=color, x_label=x_label, c_order=c_orders, y_label="Percentage",                         width=None, height=None, path=path)                    print('Success')        